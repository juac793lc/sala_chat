import 'dart:io';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:audioplayers/audioplayers.dart';
import '../models/contenido_multimedia.dart';
import 'dart:html' as html; // ignore: avoid_web_libraries_in_flutter
import 'dart:ui_web' as ui;
import 'dart:async';

class ContenidoMultimediaWidget extends StatefulWidget {
  final ContenidoMultimedia contenido;
  final VoidCallback onTextoTap;
  final VoidCallback onAudioTap;

  const ContenidoMultimediaWidget({
    super.key,
    required this.contenido,
    required this.onTextoTap,
    required this.onAudioTap,
  });

  @override
  State<ContenidoMultimediaWidget> createState() => _ContenidoMultimediaWidgetState();
}

class _ContenidoMultimediaWidgetState extends State<ContenidoMultimediaWidget> {
  late AudioPlayer _audioPlayer;
  bool _isPlaying = false;
  Duration _duration = Duration.zero;
  Duration _position = Duration.zero;

  @override
  void initState() {
    super.initState();
    _audioPlayer = AudioPlayer();
    
    // Escuchar cambios en el reproductor
    _audioPlayer.onPlayerStateChanged.listen((state) {
      if (mounted) {
        setState(() {
          _isPlaying = state == PlayerState.playing;
        });
      }
    });

    _audioPlayer.onDurationChanged.listen((duration) {
      if (mounted) {
        setState(() {
          _duration = duration;
        });
      }
    });

    _audioPlayer.onPositionChanged.listen((position) {
      if (mounted) {
        setState(() {
          _position = position;
        });
      }
    });
  }

  @override
  void dispose() {
    _audioPlayer.dispose();
    // Cancel any image stream listeners? (listeners are removed after receive)
    super.dispose();
  }

  // Cache for computed BoxFit per image URL to avoid recalculating
  final Map<String, BoxFit> _imageFitCache = {};
  final Set<String> _resolvingFits = {};

  // Funci\u00f3n para reproducir/pausar audio
  Future<void> _toggleAudioPlayback() async {
    try {
      if (_isPlaying) {
        await _audioPlayer.pause();
      } else {
        // Reproducir archivo de audio real
        if (kIsWeb && widget.contenido.url.startsWith('blob:')) {
          await _audioPlayer.play(UrlSource(widget.contenido.url));
        } else if (!kIsWeb) {
          await _audioPlayer.play(DeviceFileSource(widget.contenido.url));
        } else {
          // Fallback para assets
          await _audioPlayer.play(AssetSource('audio/ejemplo.mp3'));
        }
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Error al reproducir audio: $e'),
            backgroundColor: Colors.red,
          ),
        );
      }
    }
  }

